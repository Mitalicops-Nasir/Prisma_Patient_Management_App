generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Admin
  Patient
}

enum Gender {
  Male
  Female
  Other
}

enum AppointmentStatus {
  scheduled
  pending
  cancelled
}

model Patient {
  id                        String                 @id @default(cuid()) @map("_id")
  name                      String
  email                     String                 @unique
  phone                     String
  privacyConsent            Boolean?
  gender                    Gender?
  birthDate                 DateTime?
  address                   String?
  occupation                String?
  emergencyContactName      String?
  emergencyContactNumber    String?
  insuranceProvider         String?
  insurancePolicyNumber     String?
  allergies                 String?
  currentMedication         String?
  familyMedicalHistory      String?
  pastMedicalHistory        String?
  identificationType        String?
  identificationNumber      String?
  primaryPhysician          String?
  identificationDocumentUrl String?
  treatmentConsent          Boolean?
  disclosureConsent         Boolean?
  identificationDocumentId  String?
  emailVerified             DateTime?
  image                     String?
  password                  String?
  role                      UserRole               @default(Patient)
  accounts                  Account[] // MongoDB supports arrays for related data
  isTwoFactorEnabled        Boolean                @default(false)
  twoFactorConfirmation     TwoFactorConfirmation?
  appointments              Appointment[]
}

model Appointment {
  id                 String            @id @default(cuid()) @map("_id")
  schedule           DateTime
  reason             String
  note               String?
  primaryPhysician   String?
  status             AppointmentStatus
  cancellationReason String?
  patientId          String
  patient            Patient           @relation(fields: [patientId], references: [id])
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  patient Patient @relation(fields: [userId], references: [id]) // Update relation syntax
}

model VerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid()) @map("_id")

  patient Patient @relation(fields: [userId], references: [id])
  userId  String  @unique
}
